{"version":3,"file":"BfcsNavigator.mjs","sources":["../../../../plugin/navigation/BfcsNavigator.ts"],"sourcesContent":["import { EvtOut } from \"../common/EvtOut\";\n\nexport class BfcsNavigator<R extends Route = Route> {\n  constructor(\n    /**当前导航器的信息 */\n    readonly info: BfcsNavigator.NavigatorInfo,\n    /**父级导航器的公开信息 */\n    readonly parentInfo: BfcsNavigator.NavigatorInfo | undefined,\n    /**\n     * Foreign Function Interface\n     */\n    private _ffi: BfcsNavigator.FFI\n  ) {}\n\n  #routes: R[] = [];\n\n  /**\n   * 当前存有的 route 个数\n   */\n  get length() {\n    return this.#routes.length;\n  }\n  /**\n   * 根据下标读取路由\n   */\n  at(index: number): R | undefined {\n    return this.#routes[index < 0 ? this.#routes.length + index : index];\n  }\n\n  /**\n   * 不能连续 push 重复的 route\n   * @param route\n   */\n  push(route: R): boolean {\n    const success = this._ffi.push(this.info.nid, route);\n    if (success) {\n      this.#routes.push(route);\n      this.#onPushEvt.emit({ route });\n    }\n    return success;\n  }\n  #onPushEvt = new EvtOut<{ route: R }>();\n  get onPush() {\n    return this.#onPushEvt.toAsyncGenerator();\n  }\n  /**\n   * 返回真正 pop 出来的数量\n   * @param count\n   */\n  pop(count: number = 1): number {\n    const result = this._ffi.pop(this.info.nid, count);\n    if (result > 0) {\n      for (const route of this.#routes.splice(-result)) {\n        this.#onPopEvt.emit({ route });\n      }\n    }\n    return result;\n  }\n  #onPopEvt = new EvtOut<{ route: R }>();\n  get onPop() {\n    return this.#onPopEvt.toAsyncGenerator();\n  }\n  /**\n   * 替代当前的路由栈中最后一个\n   * 不能连续 replace 重复的 route\n   * @param route\n   */\n  replace(route: R, at = -1): boolean {\n    const index = at < 0 ? this.#routes.length + at : at;\n    if (index in this.#routes === false) {\n      return false;\n    }\n    const success = this._ffi.replace(this.info.nid, index, route);\n    if (success) {\n      const removedRoutes = this.#routes.splice(at, 1, route);\n      this.#onReplaceEvt.emit({ newRoute: route, oldRoute: removedRoutes[0] });\n    }\n    return success;\n  }\n  #onReplaceEvt = new EvtOut<{ newRoute: R; oldRoute: R }>();\n  get onReplace() {\n    return this.#onReplaceEvt.toAsyncGenerator();\n  }\n  //   /**\n  //    * 阻止默认返回行为，会提供“连续进行返回操作的次数”信息，使用场景如下：\n  //    * 1. 重要弹窗需要用户明确点击按钮做出反应，那么可以默认阻止弹窗关闭，如果用户连续进行两次返回操作，就触发默认按钮的点击结果\n  //    * 2. actionSheet（在桌面端下就是右键菜单）的关闭\n  //    * 3. 简单窗口的关闭或隐藏\n  //    * 4. 根应用（桌面应用）不能再返回\n  //    */\n  //   protected abstract _guard(reason: PromiseLike<unknown>, times?: number);\n  //   readonly onGuard: Evt<{ times: number; reason: PromiseLike<unknown> }>;\n\n  #ownNavs = new WeakSet<BfcsNavigator>();\n  /**\n   * 创新一个新的导航器\n   * @param opts\n   */\n  fork(opts: BfcsNavigator.ForkOptions): BfcsNavigator | undefined {\n    const parentNav = this;\n    //   opts.fromNavigator === null ? null : opts.fromNavigator || this;\n    // const parentNid = parentNav?.info.nid ?? -1;\n    const result = this._ffi.fork(this.info.nid, opts.data);\n    if (result >= 0) {\n      const newNavigator = new BfcsNavigator(\n        Object.freeze({ data: opts.data, nid: result }),\n        this.info,\n        this._ffi\n      );\n      this.#ownNavs.add(newNavigator);\n      this.#onForkEvt.emit({\n        newNavigator: newNavigator,\n        fromNavigator: this,\n      });\n      return newNavigator;\n    }\n  }\n  #onForkEvt = new EvtOut<{\n    newNavigator: BfcsNavigator;\n    fromNavigator: BfcsNavigator | null;\n  }>();\n  get onFork() {\n    return this.#onForkEvt.toAsyncGenerator();\n  }\n\n  /**\n   * 切换导航器，切换出来后，当前 navigator 就不能再操作\n   * 只能切换自己 fork 出来的子路由 或者 自身\n   *\n   * 如果无权切换，那么会返回 false\n   */\n  checkout(navigator: BfcsNavigator): boolean {\n    if (this.#ownNavs.has(navigator) === false) {\n      return false;\n    }\n    return this._ffi.checkout(this.info.nid, navigator.info.nid);\n    // if (success) {\n    //   this.#onCheckoutEvt.emit({\n    //     fromNavigator: this, // 应该使用当前正在激活的 nav\n    //     toNavigator: navigator,\n    //   });\n    // }\n    // return success;\n  }\n  #onActivatedEvt = new EvtOut<{\n    fromNavigator: BfcsNavigator;\n    toNavigator: BfcsNavigator;\n  }>();\n  get onActivated() {\n    return this.#onActivatedEvt.toAsyncGenerator();\n  }\n\n  /**\n   * 销毁导航器\n   * 只能销毁自己 fork 出来的子路由 或者 自身\n   *\n   * 如果无权切换，那么会返回 false\n   * @param navigator\n   */\n  destroy(navigator: BfcsNavigator, reason?: unknown): boolean {\n    if (this.#ownNavs.has(navigator) === false) {\n      return false;\n    }\n    const success = this._ffi.destroy(this.info.nid, navigator.info.nid);\n    if (success) {\n      this.#ownNavs.delete(navigator);\n      navigator.#onDestroyEvt.emit({ reason });\n    }\n    return success;\n  }\n  #onDestroyEvt = new EvtOut<{\n    reason?: unknown;\n  }>();\n\n  get onDestroy() {\n    return this.#onDestroyEvt.toAsyncGenerator();\n  }\n}\ntype Closeable = string | number | { [key: string]: Closeable };\n\nexport type Route = Closeable;\n\nexport namespace BfcsNavigator {\n  export type FFI = {\n    init(): string;\n    push(nid: number, route: Route): boolean;\n    pop(nid: number, count: number): number;\n    replace(nid: number, at: number, newRoute: Route): boolean;\n    fork(nid: number, data: Closeable): number;\n    checkout(nid: number, toNid: number): boolean;\n    destroy(nid: number, targetNid: number): boolean;\n    onActivated: EvtOut<{ fromNid: number; toNid: number }>;\n    onUnActivated: EvtOut<{ fromNid: number; toNid: number }>;\n  };\n  export type NavigatorInfo = Readonly<{\n    nid: number;\n    //   maxGuardTimes: number;\n    data: Closeable;\n  }>;\n  export type ForkOptions = {\n    data: Closeable;\n    // /**\n    //  * 意味着新导航器能拦截的连续点击返回的最大次数，只能设置不多于当前导航器的拦截数。\n    //  * 默认与当前导航器的最大拦截数一致。\n    //  */\n    // maxGuardTimes?: number;\n\n    // /**\n    //  * 能为其声明来源。默认会提供当前 nav 对象。\n    //  * 如果设置成 null ，那么就是脱离父级存在。\n    //  */\n    // fromNavigator?: BfcsNavigator | null;\n  };\n}\n"],"names":[],"mappings":"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"}