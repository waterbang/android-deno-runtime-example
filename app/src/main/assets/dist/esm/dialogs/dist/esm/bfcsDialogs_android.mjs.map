{"version":3,"file":"bfcsDialogs_android.mjs","sources":["../../../../../../dialogs/dist/esm/bfcsDialogs_android.mjs"],"sourcesContent":["class BfcsDialogs extends HTMLElement {\n  constructor() {\n    super();\n    this._ffi = native_dialog;\n    this.setAttribute(\"did\", (Math.random() * Date.now()).toFixed(0));\n  }\n  connectedCallback() {\n  }\n  disconnectedCallback() {\n  }\n  static get observedAttributes() {\n    return [\"visible\"];\n  }\n  async attributeChangedCallback(attrName, oldVal, newVal) {\n  }\n}\nclass BfcsDialogAlert extends BfcsDialogs {\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    let observer = new MutationObserver(async (mutations) => {\n      if (this.hasAttribute(\"visible\")) {\n        await this.openAlert();\n      }\n    });\n    observer.observe(this, {\n      subtree: true,\n      childList: true,\n      attributes: true\n    });\n  }\n  openAlert() {\n    return new Promise((resolve, reject) => {\n      let alertConfig = {\n        title: \"\",\n        content: \"\",\n        confirmText: \"\",\n        dismissOnBackPress: true,\n        dismissOnClickOutSide: false\n      };\n      alertConfig.title = this.getAttribute(\"title\") ?? \"\";\n      alertConfig.content = this.getAttribute(\"content\") ?? \"\";\n      alertConfig.dismissOnBackPress = this.hasAttribute(\"dismissOnBackPress\") ? true : false;\n      alertConfig.dismissOnClickOutSide = this.hasAttribute(\"dismissOnClickOutSide\") ? true : false;\n      const did = this.getAttribute(\"did\");\n      const childNode = this.querySelector(\"dweb-dialog-button\");\n      let bid = \"\";\n      if (childNode) {\n        alertConfig.confirmText = childNode.getAttribute(\"label\") ?? \"\";\n        bid = childNode.getAttribute(\"bid\") ?? \"\";\n      }\n      const cb = `document.querySelector('dweb-dialog-alert[did=\"${did}\"] dweb-dialog-button[bid=\"${bid}\"]').dispatchEvent(new CustomEvent('click'))`;\n      this._ffi.openAlert(JSON.stringify(alertConfig), cb);\n      resolve();\n    });\n  }\n  async attributeChangedCallback(attrName, oldVal, newVal) {\n    if (attrName === \"visible\" && oldVal !== newVal) {\n      if (this.hasAttribute(\"visible\")) {\n        this.setAttribute(\"visible\", \"\");\n      } else {\n        this.removeAttribute(\"visible\");\n      }\n    }\n  }\n}\nclass BfcsDialogPrompt extends BfcsDialogs {\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    let observer = new MutationObserver(async (mutations) => {\n      if (this.hasAttribute(\"visible\")) {\n        await this.openPrompt();\n      }\n    });\n    observer.observe(this, {\n      subtree: true,\n      childList: true,\n      attributes: true\n    });\n  }\n  openPrompt() {\n    return new Promise((resolve, reject) => {\n      let promptConfig = {\n        title: \"\",\n        label: \"\",\n        confirmText: \"\",\n        cancelText: \"\",\n        defaultValue: \"\",\n        dismissOnBackPress: true,\n        dismissOnClickOutSide: false\n      };\n      promptConfig.title = this.getAttribute(\"title\") ?? \"\";\n      promptConfig.label = this.getAttribute(\"label\") ?? \"\";\n      promptConfig.defaultValue = this.getAttribute(\"defaultValue\") ?? \"\";\n      promptConfig.dismissOnBackPress = this.hasAttribute(\"dismissOnBackPress\") ? true : false;\n      promptConfig.dismissOnClickOutSide = this.hasAttribute(\"dismissOnClickOutSide\") ? true : false;\n      const did = this.getAttribute(\"did\");\n      let cb = \"\";\n      this.querySelectorAll(\"dweb-dialog-button\").forEach((childNode, index) => {\n        const bid = childNode.getAttribute(\"bid\") ?? \"\";\n        if (index === 0) {\n          promptConfig.confirmText = childNode.getAttribute(\"label\") ?? \"\";\n          cb += `document.querySelector('dweb-dialog-prompt[did=\"${did}\"] dweb-dialog-button[bid=\"${bid}\"]').dispatchEvent(new CustomEvent('click'))`;\n        } else {\n          promptConfig.cancelText = childNode.getAttribute(\"label\") ?? \"\";\n          cb += `;document.querySelector('dweb-dialog-prompt[did=\"${did}\"] dweb-dialog-button[bid=\"${bid}\"]').dispatchEvent(new CustomEvent('click'))`;\n        }\n      });\n      this._ffi.openPrompt(JSON.stringify(promptConfig), cb);\n      resolve();\n    });\n  }\n  async attributeChangedCallback(attrName, oldVal, newVal) {\n    if (attrName === \"visible\" && oldVal !== newVal) {\n      if (this.hasAttribute(\"visible\")) {\n        this.setAttribute(\"visible\", \"\");\n      } else {\n        this.removeAttribute(\"visible\");\n      }\n    }\n  }\n}\nclass BfcsDialogConfirm extends BfcsDialogs {\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    let observer = new MutationObserver(async (mutations) => {\n      if (this.hasAttribute(\"visible\")) {\n        await this.openConfirm();\n      }\n    });\n    observer.observe(this, {\n      subtree: true,\n      childList: true,\n      attributes: true\n    });\n  }\n  openConfirm() {\n    return new Promise((resolve, reject) => {\n      let confirmConfig = {\n        title: \"\",\n        message: \"\",\n        confirmText: \"\",\n        cancelText: \"\",\n        dismissOnBackPress: true,\n        dismissOnClickOutSide: false\n      };\n      confirmConfig.title = this.getAttribute(\"title\") ?? \"\";\n      confirmConfig.message = this.getAttribute(\"message\") ?? \"\";\n      confirmConfig.dismissOnBackPress = this.hasAttribute(\"dismissOnBackPress\") ? true : false;\n      confirmConfig.dismissOnClickOutSide = this.hasAttribute(\"dismissOnClickOutSide\") ? true : false;\n      const did = this.getAttribute(\"did\");\n      let cb = \"\";\n      this.querySelectorAll(\"dweb-dialog-button\").forEach((childNode, index) => {\n        const bid = childNode.getAttribute(\"bid\") ?? \"\";\n        if (index === 0) {\n          confirmConfig.confirmText = childNode.getAttribute(\"label\") ?? \"\";\n          cb += `document.querySelector('dweb-dialog-confirm[did=\"${did}\"] dweb-dialog-button[bid=\"${bid}\"]').dispatchEvent(new CustomEvent('click'))`;\n        } else {\n          confirmConfig.cancelText = childNode.getAttribute(\"label\") ?? \"\";\n          cb += `;document.querySelector('dweb-dialog-confirm[did=\"${did}\"] dweb-dialog-button[bid=\"${bid}\"]').dispatchEvent(new CustomEvent('click'))`;\n        }\n      });\n      this._ffi.openConfirm(JSON.stringify(confirmConfig), cb);\n      resolve();\n    });\n  }\n  async attributeChangedCallback(attrName, oldVal, newVal) {\n    if (attrName === \"visible\" && oldVal !== newVal) {\n      if (this.hasAttribute(\"visible\")) {\n        this.setAttribute(\"visible\", \"\");\n      } else {\n        this.removeAttribute(\"visible\");\n      }\n    }\n  }\n}\nclass BfcsDialogBeforeUnload extends BfcsDialogs {\n  constructor() {\n    super();\n  }\n  connectedCallback() {\n    let observer = new MutationObserver(async (mutations) => {\n      if (this.hasAttribute(\"visible\")) {\n        await this.openBeforeUnload();\n      }\n    });\n    observer.observe(this, {\n      subtree: true,\n      childList: true,\n      attributes: true\n    });\n  }\n  openBeforeUnload() {\n    return new Promise((resolve, reject) => {\n      let confirmConfig = {\n        title: \"\",\n        message: \"\",\n        confirmText: \"\",\n        cancelText: \"\",\n        dismissOnBackPress: true,\n        dismissOnClickOutSide: false\n      };\n      confirmConfig.title = this.getAttribute(\"title\") ?? \"\";\n      confirmConfig.message = this.getAttribute(\"message\") ?? \"\";\n      confirmConfig.dismissOnBackPress = this.hasAttribute(\"dismissOnBackPress\") ? true : false;\n      confirmConfig.dismissOnClickOutSide = this.hasAttribute(\"dismissOnClickOutSide\") ? true : false;\n      const did = this.getAttribute(\"did\");\n      let cb = \"\";\n      this.querySelectorAll(\"dweb-dialog-button\").forEach((childNode, index) => {\n        const bid = childNode.getAttribute(\"bid\") ?? \"\";\n        if (index === 0) {\n          confirmConfig.confirmText = childNode.getAttribute(\"label\") ?? \"\";\n          cb += `document.querySelector('dweb-dialog-confirm[did=\"${did}\"] dweb-dialog-button[bid=\"${bid}\"]').dispatchEvent(new CustomEvent('click'))`;\n        } else {\n          confirmConfig.cancelText = childNode.getAttribute(\"label\") ?? \"\";\n          cb += `;document.querySelector('dweb-dialog-confirm[did=\"${did}\"] dweb-dialog-button[bid=\"${bid}\"]').dispatchEvent(new CustomEvent('click'))`;\n        }\n      });\n      this._ffi.openBeforeUnload(JSON.stringify(confirmConfig), cb);\n      resolve();\n    });\n  }\n  async attributeChangedCallback(attrName, oldVal, newVal) {\n    if (attrName === \"visible\" && oldVal !== newVal) {\n      if (this.hasAttribute(\"visible\")) {\n        this.setAttribute(\"visible\", \"\");\n      } else {\n        this.removeAttribute(\"visible\");\n      }\n    }\n  }\n}\nexport { BfcsDialogAlert, BfcsDialogBeforeUnload, BfcsDialogConfirm, BfcsDialogPrompt };\n//# sourceMappingURL=bfcsDialogs_android.mjs.map\n"],"names":[],"mappings":"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"}